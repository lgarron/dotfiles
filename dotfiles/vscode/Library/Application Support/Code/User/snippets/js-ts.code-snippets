{
  "document.createElement": {
    "scope": "javascript,typescript",
    "prefix": "dc",
    "body": "document.createElement(\"$0\")",
    "description": "document.createElement"
  },
  "document.body.appendChild": {
    "scope": "javascript,typescript",
    "prefix": "dba",
    "body": "document.body.appendChild($0)",
    "description": "document.body.appendChild"
  },
  "document.querySelector": {
    "scope": "javascript,typescript",
    "prefix": "dq",
    "body": "document.querySelector(\"$0\")",
    "description": "document.querySelector"
  },
  "document.querySelectorAll": {
    "scope": "javascript,typescript",
    "prefix": "dqa",
    "body": "document.querySelectorAll(\"$0\")",
    "description": "document.querySelectorAll"
  },
  "DOMContentLoaded": {
    "scope": "javascript,typescript",
    "prefix": "DOMContentLoaded",
    "body": "window.addEventListener(\"DOMContentLoaded\", $1() => {\n  $0\n});",
    "description": "Listener for DOMContentLoaded"
  },
  "IIFE": {
    "scope": "javascript,typescript",
    "prefix": "iife",
    "body": "(() => { ${0:$TM_SELECTED_TEXT} })()",
    "description": "Immediately invoked function expression (IIFE)"
  },
  "Awaited async IIFE": {
    "scope": "javascript,typescript",
    "prefix": "aaiife",
    "body": "await (async () => { ${0:$TM_SELECTED_TEXT} })()",
    "description": "Awaited async immediately invoked function expression (IIFE)"
  },
  "Async IIFE": {
    "scope": "javascript,typescript",
    "prefix": "aiife",
    "body": "(async () => { ${0:$TM_SELECTED_TEXT} })()",
    "description": "Async immediately invoked function expression (IIFE)"
  },
  "sleep": {
    "scope": "javascript,typescript",
    "prefix": "sleep",
    "body": "await new Promise((resolve) => setTimeout(resolve, ${0:1000}));",
    "description": "Sleep inside an async function"
  },
  "console.log": {
    "scope": "javascript,typescript",
    "prefix": "log",
    "body": "console.log(${0:$TM_SELECTED_TEXT});",
    "description": "Log to the console (custom)"
  },
  "debug log": {
    "scope": "javascript,typescript",
    "prefix": "dl",
    "body": "console.log(\"debug\", \"$TM_FILENAME\", \"$RANDOM_HEX\");",
    "description": "Add a debug logging statement with a random identifier"
  },
  "throw new Error": {
    "scope": "javascript,typescript",
    "prefix": "err",
    "body": "throw new Error($0);",
    "description": "Add a line to throw a new error."
  },
  "biome-ignore-lint": {
    "scope": "javascript,typescript",
    "prefix": "// biome-ignore lint",
    "body": "// biome-ignore lint/$1: $2",
    "description": "Ignore a Biome lint issue."
  },
  "biome-ignore-format": {
    "scope": "javascript,typescript",
    "prefix": "// biome-ignore format",
    "body": "// biome-ignore format/$1: $2",
    "description": "Ignore a Biome format issue."
  },
  "is-defined": {
    "scope": "javascript,typescript",
    "body": "typeof (${0:$TM_SELECTED_TEXT}) !== \"undefined\"",
    "description": "Test if a value is defined."
  },
  "node shebang": {
    "prefix": "#!",
    "body": [
      "#!/usr/bin/env node --"
    ],
    "description": "node shebang"
  },
  "bun shebang": {
    "prefix": "#!",
    "body": [
      "#!/usr/bin/env -S bun run --"
    ],
    "description": "bun shebang"
  },
  "Promise type": {
    "scope": "typescript",
    "prefix": "P",
    "body": "Promise<${0:void}>",
    "description": "Promise type"
  },
  "import.meta.resolve": {
    "prefix": "imr",
    "body": "import.meta.resolve(${0})",
    "description": "import.meta.resolve"
  },
  "cmd-ts-too example": {
    "prefix": "cmd-ts-too example",
    "body": [
      "#!/usr/bin/env -S bun run --",
      "",
      "import {",
      "  binary,",
      "  string as cmdString,",
      "  command,",
      "  oneOf,",
      "  option,",
      "  optional,",
      "  positional,",
      "  run,",
      "} from \"cmd-ts-too\";",
      "import { ExistingPath } from \"cmd-ts-too/batteries/fs\";",
      "",
      "const app = command({",
      "  name: \"hevc\",",
      "  args: {",
      "    enumFlag: option({",
      "      type: optional(oneOf([\"foo\", \"bar\", \"baz\"])),",
      "      long: \"enum-flag\",",
      "      defaultValue: () => \"foo\",",
      "      defaultValueIsSerializable: true,",
      "    }),",
      "    name: option({",
      "      type: optional(cmdString),",
      "      long: \"name\",",
      "    }),",
      "    sourceFile: positional({",
      "      type: ExistingPath,",
      "      displayName: \"Source file\",",
      "    }),",
      "  },",
      "  handler: async ({ enumFlag, name, sourceFile }) => {",
      "    console.log({ enumFlag, name, sourceFile });",
      "  },",
      "});",
      "",
      "await run(binary(app), process.argv);",
    ]
  },
  "test (bun)": {
    "prefix": "test",
    "body": [
      "test(\"${1:â€¦}\", async () => {",
      "  ${2}",
      "});",
    ]
  },
  "expect (bun)": {
    "prefix": "expect",
    "body": [
      "expect(${1}).${2:toBe(true)};",
    ]
  }
}
