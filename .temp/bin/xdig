#!/usr/bin/env bun-realpath
// @bun

// scripts/system/xdig.ts
import assert from "assert";
import { join } from "path";
import { argv } from "process";
var {file, spawn } = globalThis.Bun;

// node_modules/xdg-basedir/index.js
import os from "os";
import path from "path";
var homeDirectory = os.homedir();
var { env } = process;
var xdgData = env.XDG_DATA_HOME || (homeDirectory ? path.join(homeDirectory, ".local", "share") : undefined);
var xdgConfig = env.XDG_CONFIG_HOME || (homeDirectory ? path.join(homeDirectory, ".config") : undefined);
var xdgState = env.XDG_STATE_HOME || (homeDirectory ? path.join(homeDirectory, ".local", "state") : undefined);
var xdgCache = env.XDG_CACHE_HOME || (homeDirectory ? path.join(homeDirectory, ".cache") : undefined);
var xdgRuntime = env.XDG_RUNTIME_DIR || undefined;
var xdgDataDirectories = (env.XDG_DATA_DIRS || "/usr/local/share/:/usr/share/").split(":");
if (xdgData) {
  xdgDataDirectories.unshift(xdgData);
}
var xdgConfigDirectories = (env.XDG_CONFIG_DIRS || "/etc/xdg").split(":");
if (xdgConfig) {
  xdgConfigDirectories.unshift(xdgConfig);
}

// scripts/system/xdig.ts
var configDir = xdgConfigDirectories[0];
var configFilePath = join(configDir, "dig/xdigrc.json");
var { defaultPrefixArgs } = await (async () => {
  if (!await file(configFilePath).exists()) {
    return { defaultPrefixArgs: [] };
  }
  return file(configFilePath).json();
})();
assert.equal(await spawn({
  cmd: ["dig", ...defaultPrefixArgs, ...argv.slice(2)],
  stdout: "inherit",
  stderr: "inherit"
}).exited, 0);
