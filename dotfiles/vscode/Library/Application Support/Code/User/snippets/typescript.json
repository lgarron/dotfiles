{
  "document.createElement": {
    "prefix": "d",
    "body": "document.createElement(\"$0\")",
    "description": "document.createElement"
  },
  "appendChild(document.createElement())": {
    "prefix": "apc",
    "body": "appendChild(document.createElement(\"$0\"))",
    "description": "appendChild(document.createElement())"
  },
  "DOMContentLoaded": {
    "prefix": "DOMContentLoaded",
    "body": "window.addEventListener(\"DOMContentLoaded\", $1() => {\n  $0\n});",
    "description": "Listener for DOMContentLoaded"
  },
  "Async IIFE": {
    "prefix": "aiife",
    "body": "(async () => { ${0:$TM_SELECTED_TEXT} })()",
    "description": "Async immediately invoked function expression (IIFE)"
  },
  "sleep": {
    "prefix": "sleep",
    "body": "await new Promise((resolve) => setTimeout(resolve, ${0:1000}));",
    "description": "Sleep inside an async function"
  },
  "debug log": {
    "prefix": "dl",
    "body": "console.log(\"debug\", \"$TM_FILENAME\", \"$RANDOM_HEX\");",
    "description": "Add a debug logging statement with a random identifier"
  },
  "debug log selected line": {
    "prefix": "dls",
    "body": "console.log(\"debug\", \"$TM_FILENAME\", \"$RANDOM_HEX\", \"${TM_CURRENT_LINE/\"/\\\"/g}\".trim().slice(0, 20));\n$TM_CURRENT_LINE",
    "description": "Add a debug logging statement for a selected line"
  },
  "throw new Error": {
    "prefix": "err",
    "body": "throw new Error($0);",
    "description": "Add a line to throw a new error."
  },
  "document.body.appendChild": {
    "prefix": "d",
    "body": "document.body.appendChild($0)",
    "description": "document.body.appendChild"
  },
  "document.querySelector": {
    "prefix": "d",
    "body": "document.querySelector(\"$0\")",
    "description": "document.querySelector"
  },
  "TypeDoc @category": {
    "prefix": "@category",
    "body": "/** @category $0 */",
    "description": "TypeDoc @category"
  },
  "@deprecated": {
    "prefix": "@deprecated",
    "body": "/** @deprecated */",
    "description": "@deprecated"
  }
}
